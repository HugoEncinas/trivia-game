{"version":3,"sources":["redux/action-types/beginTriviaActionType.ts","redux/action-types/setResultsActionType.ts","redux/action-types/trackAnwserActionType.ts","redux/action-types/changeQuestionActionType.ts","redux/initialState.ts","redux/reducers/index.ts","redux/reducers/homeReducer.ts","redux/reducers/quizReducer.ts","redux/action-types/resetTriviaActionType.ts","redux/api/getQuiz.ts","redux/utils.ts","redux/actions/beginTriviaAction.ts","redux/actions/setResultsAction.ts","redux/actions/trackAnwserAction.ts","redux/actions/changeQuestionAction.ts","redux/actions/resetTriviaAction.ts","redux/sagas/beginTriviaSaga.ts","redux/sagas/index.ts","redux/index.ts","views/HomeScreen/styled.ts","views/HomeScreen/HomeDisplay.tsx","views/HomeScreen/HomeContainer.tsx","views/HomeScreen/index.ts","views/QuizScreen/Question/styled.ts","views/QuizScreen/Question/index.ts","views/QuizScreen/Question/QuestionDisplay.tsx","views/QuizScreen/QuizDisplay.tsx","views/QuizScreen/QuizContainer.tsx","views/QuizScreen/index.ts","views/ResultsScreen/Result/styled.ts","views/ResultsScreen/Result/index.ts","views/ResultsScreen/Result/ResultDisplay.tsx","views/ResultsScreen/styled.ts","App.tsx","views/ResultsScreen/ResultsDisplay.tsx","views/ResultsScreen/ResultsContainer.tsx","views/ResultsScreen/index.ts","serviceWorker.js","index.tsx"],"names":["BEGIN_TRIVIA","SET_RESULTS","TRACK_ANSWER","CHANGE_QUESTION","home","begin","results","category","type","difficulty","question","correct_answer","incorrect_answers","quiz","currentQuestion","answersTrack","initialState","appReducer","combineReducers","state","arguments","length","undefined","action","Object","objectSpread","toConsumableArray","concat","answer","rootReducer","getQuizData","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","stop","_x","apply","this","makeActionCreator","_len","argNames","Array","_key","_len2","args","_key2","forEach","arg","index","forwardTo","location","history","push","beginTriviaAction","setResultsAction","trackAnwserAction","changeQuestionAction","resetTriviaAction","beginTriviaSaga","watchBeginTriviaSaga","objectDestructuringEmpty","call","put","console","log","_marked","_context2","takeEvery","_marked2","rootSaga","root","all","getStore","sagaMiddleWare","createSagaMiddleWare","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","logger","run","Item","styled","div","_templateObject","Title","h4","_templateObject2","Subtitle","h5","_templateObject3","HomeDisplay","button","_templateObject4","beginHandler","react_default","createElement","Container","className","Button","variant","color","onClick","HomeContainerComponent","event","beginTrivia","_this","props","HomeScreen_HomeDisplay","PureComponent","mapDispatchToProps","Home","connect","StyledButton","styled_templateObject","Question","questionHandler","e","QuizDisplay","maxWidth","QuizContainerComponent","_this$props","trackAnwser","changeQuestion","_this$props2","QuizScreen_QuizDisplay","Quiz","ListItem","li","Result_styled_templateObject","result","Result","toString","ERoutes","StyledContainer","ResultsScreen_styled_templateObject","List","ul","styled_templateObject2","ResultsDisplay","questions","score","restartQuizHandler","map","key","fullWidth","ResultsContainerComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","resetTrivia","filter","item","setState","ResultsScreen_ResultsDisplay","Results","createHistory","basename","App","es","Router","Switch","Route","path","exact","component","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef780d26.chunk.js","sourcesContent":["export const BEGIN_TRIVIA = 'BEGIN_TRIVIA';\r\n","export const SET_RESULTS = 'SET_RESULTS';\r\n","export const TRACK_ANSWER = 'TRACK_ANSWER';\r\n","export const CHANGE_QUESTION = 'CHANGE_QUESTION';\r\n","export const home: any = {\r\n  begin: false,\r\n  results: [\r\n    {\r\n      category: '',\r\n      type: '',\r\n      difficulty: '',\r\n      question: '',\r\n      correct_answer: '',\r\n      incorrect_answers: [''],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const quiz: any = {\r\n  currentQuestion: 1,\r\n  answersTrack: [],\r\n};\r\n\r\nexport const initialState: any = {\r\n  home,\r\n  quiz,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { RESET_TRIVIA } from '../action-types';\r\nimport { initialState } from '../initialState';\r\nimport home from './homeReducer';\r\nimport quiz from './quizReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  home,\r\n  quiz,\r\n});\r\n\r\nconst rootReducer = (state: any, action: any) => {\r\n  if (action.type === RESET_TRIVIA) {\r\n    state = initialState;\r\n  }\r\n  return appReducer(state, action);\r\n};\r\n\r\nexport default rootReducer;\r\n","import { BEGIN_TRIVIA, SET_RESULTS } from '../action-types';\r\nimport { home as initialState } from '../initialState';\r\n\r\nexport default function home(state = initialState, action: any) {\r\n  switch (action.type) {\r\n    case BEGIN_TRIVIA:\r\n      return {\r\n        ...state,\r\n        begin: true,\r\n      };\r\n    case SET_RESULTS:\r\n      return {\r\n        ...state,\r\n        results: [...action.results],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { TRACK_ANSWER, CHANGE_QUESTION } from '../action-types';\r\nimport { quiz as initialState } from '../initialState';\r\n\r\nexport default function home(state = initialState, action: any) {\r\n  switch (action.type) {\r\n    case TRACK_ANSWER:\r\n      return {\r\n        ...state,\r\n        answersTrack: [...state.answersTrack, action.answer],\r\n      };\r\n    case CHANGE_QUESTION:\r\n      return {\r\n        ...state,\r\n        currentQuestion: state.currentQuestion + 1,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const RESET_TRIVIA = 'RESET_TRIVIA';\r\n","export const getQuizData = async (action: any) => {\r\n  try {\r\n    const url =\r\n      'https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean';\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n","import { history } from '../App';\r\n\r\nexport const makeActionCreator = (type: string, ...argNames: any) => {\r\n  const action: any = { type };\r\n  return function(...args: any) {\r\n    argNames.forEach((arg: any, index: number) => {\r\n      action[argNames[index]] = args[index];\r\n    });\r\n\r\n    return action;\r\n  };\r\n};\r\n\r\nexport function forwardTo(location: any) {\r\n  history.push(location);\r\n}\r\n","import { makeActionCreator } from '../utils';\r\nimport { BEGIN_TRIVIA } from '../action-types';\r\n\r\nexport const beginTriviaAction = makeActionCreator(BEGIN_TRIVIA);\r\n","import { makeActionCreator } from '../utils';\r\nimport { SET_RESULTS } from '../action-types';\r\n\r\nexport const setResultsAction = makeActionCreator(SET_RESULTS, 'results');\r\n","import { makeActionCreator } from '../utils';\r\nimport { TRACK_ANSWER } from '../action-types';\r\n\r\nexport const trackAnwserAction = makeActionCreator(TRACK_ANSWER, 'answer');\r\n","import { makeActionCreator } from '../utils';\r\nimport { CHANGE_QUESTION } from '../action-types';\r\n\r\nexport const changeQuestionAction = makeActionCreator(CHANGE_QUESTION);\r\n","import { makeActionCreator } from '../utils';\r\nimport { RESET_TRIVIA } from '../action-types';\r\n\r\nexport const resetTriviaAction = makeActionCreator(RESET_TRIVIA);\r\n","import { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { BEGIN_TRIVIA } from '../action-types';\r\nimport { getQuizData } from '../api';\r\nimport { setResultsAction } from '../actions';\r\nimport { forwardTo } from '../utils';\r\n\r\nfunction* beginTriviaSaga({}) {\r\n  try {\r\n    const response = yield call(getQuizData, {});\r\n    yield put(setResultsAction(response.results));\r\n    yield call(forwardTo, '/quiz');\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* watchBeginTriviaSaga() {\r\n  yield takeEvery(BEGIN_TRIVIA, beginTriviaSaga);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport { watchBeginTriviaSaga } from './beginTriviaSaga';\r\n\r\nexport const rootSaga = function* root() {\r\n  yield all([watchBeginTriviaSaga()]);\r\n};\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleWare from 'redux-saga';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './reducers';\r\nimport { initialState } from './initialState';\r\nimport { rootSaga } from './sagas';\r\n\r\nconst getStore = () => {\r\n  const sagaMiddleWare = createSagaMiddleWare();\r\n  const composeEnhancers =\r\n    ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n      (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})) ||\r\n    compose;\r\n\r\n  const store: any = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(logger, sagaMiddleWare)),\r\n  );\r\n  sagaMiddleWare.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport default getStore;\r\n","import styled from 'styled-components';\r\n\r\nexport const Item = styled.div``;\r\n\r\nexport const Title = styled.h4`\r\n  color: #dedede;\r\n`;\r\n\r\nexport const Subtitle = styled.h5`\r\n  color: #dedede;\r\n`;\r\n\r\nexport const Button2 = styled.button`\r\n  color: #fff;\r\n  background-color: #3f51b5;\r\n`;\r\n","import React from 'react';\r\nimport { Container, Button } from '@material-ui/core';\r\nimport { Item, Title, Subtitle } from './styled';\r\n\r\ntype IProps = {\r\n  beginHandler(event: any): any;\r\n};\r\n\r\nconst HomeDisplay = ({ beginHandler }: IProps) => (\r\n  <Container className=\"container\">\r\n    <Item>\r\n      <Title className=\"title\">Welcome to the Trivia Challenge!</Title>\r\n    </Item>\r\n    <Item>\r\n      <Subtitle className=\"subtitle\">\r\n        You will be presented with 10 True or False questions.\r\n      </Subtitle>\r\n    </Item>\r\n    <Item>\r\n      <Subtitle className=\"subtitle\">Can you score 100%?</Subtitle>\r\n    </Item>\r\n    <Item>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={beginHandler}>\r\n        BEGIN\r\n      </Button>\r\n    </Item>\r\n  </Container>\r\n);\r\n\r\nexport default HomeDisplay;\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeDisplay from './HomeDisplay';\r\nimport { beginTriviaAction } from '../../redux/actions';\r\n\r\ntype IProps = {\r\n  beginTrivia: Function;\r\n};\r\n\r\nclass HomeContainerComponent extends PureComponent<IProps> {\r\n  beginHandler = (event: any) => {\r\n    const { beginTrivia } = this.props;\r\n    beginTrivia();\r\n  };\r\n  render() {\r\n    return <HomeDisplay beginHandler={this.beginHandler} />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({});\r\n\r\nconst mapDispatchToProps = {\r\n  beginTrivia: beginTriviaAction,\r\n};\r\n\r\nconst HomeContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(HomeContainerComponent);\r\n\r\nexport { HomeContainer };\r\n","import { HomeContainer as Home } from './HomeContainer';\r\nexport default Home;\r\n","import styled from 'styled-components';\r\nimport { Button } from '@material-ui/core';\r\n\r\nexport const StyledButton = styled(Button)`\r\n  margin-right: 16px !important;\r\n`;\r\n","import { QuestionDisplay as Question } from './QuestionDisplay';\r\nexport default Question;\r\n","import React from 'react';\r\nimport { StyledButton } from './styled';\r\n\r\nexport const QuestionDisplay = ({\r\n  question,\r\n  currentQuestion,\r\n  questionHandler,\r\n}: any) => (\r\n  <div>\r\n    <h1>{question.category}</h1>\r\n    <h2>{question.question}</h2>\r\n    <p>{currentQuestion} of 10</p>\r\n    <StyledButton\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={e => questionHandler(e, 'True')}\r\n    >\r\n      True\r\n    </StyledButton>\r\n    <StyledButton\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={e => questionHandler(e, 'False')}\r\n    >\r\n      False\r\n    </StyledButton>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport Question from './Question';\r\n\r\ntype IProps = {\r\n  question: Object;\r\n  currentQuestion: number;\r\n  questionHandler: Function;\r\n};\r\n\r\nconst QuizDisplay = ({\r\n  question,\r\n  currentQuestion,\r\n  questionHandler,\r\n}: IProps) => (\r\n  <Container maxWidth=\"sm\" className=\"container\">\r\n    <Question\r\n      question={question}\r\n      currentQuestion={currentQuestion}\r\n      questionHandler={questionHandler}\r\n    ></Question>\r\n  </Container>\r\n);\r\n\r\nexport default QuizDisplay;\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport QuizDisplay from './QuizDisplay';\r\nimport { trackAnwserAction, changeQuestionAction } from '../../redux/actions';\r\n\r\ntype IProps = {\r\n  results: Array<any>;\r\n  currentQuestion: number;\r\n  trackAnwser: Function;\r\n  changeQuestion: Function;\r\n  history: any;\r\n};\r\n\r\nclass QuizContainerComponent extends PureComponent<IProps> {\r\n  questionHandler = (event: any, answer: string) => {\r\n    const {\r\n      results,\r\n      currentQuestion,\r\n      trackAnwser,\r\n      changeQuestion,\r\n      history,\r\n    } = this.props;\r\n\r\n    if (results[currentQuestion - 1].correct_answer === answer) {\r\n      trackAnwser(true);\r\n    } else {\r\n      trackAnwser(false);\r\n    }\r\n    if (currentQuestion < 10) {\r\n      changeQuestion();\r\n    } else {\r\n      history.push('/results');\r\n    }\r\n  };\r\n  render() {\r\n    const { results, currentQuestion } = this.props;\r\n    return (\r\n      <QuizDisplay\r\n        question={results[currentQuestion - 1]}\r\n        currentQuestion={currentQuestion}\r\n        questionHandler={this.questionHandler}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  results: state.home.results,\r\n  currentQuestion: state.quiz.currentQuestion,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  trackAnwser: trackAnwserAction,\r\n  changeQuestion: changeQuestionAction,\r\n};\r\n\r\nconst QuizContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(QuizContainerComponent);\r\n\r\nexport { QuizContainer };\r\n","import { QuizContainer as Quiz } from './QuizContainer';\r\nexport default Quiz;\r\n","import styled from 'styled-components';\r\n\r\nexport const ListItem = styled.li<any>`\r\n  margin-bottom: 16px;\r\n  color: ${(props: any) => (props.result == 'true' ? 'green' : 'red')};\r\n  &:before {\r\n    margin-right: 4px;\r\n    content: '${(props: any) => (props.result == 'true' ? '✓' : 'X')}';\r\n  }\r\n`;\r\n","import { ResultDisplay as Result } from './ResultDisplay';\r\nexport default Result;\r\n","import React from 'react';\r\nimport { ListItem } from './styled';\r\nexport const ResultDisplay = ({ question, result }: any) => (\r\n  <ListItem result={result.toString()}>\r\n    <span>\r\n      <i className=\"fas fa-plus\"></i>\r\n      {question.question}\r\n    </span>\r\n    <div>Correct Answer: {question.correct_answer}</div>\r\n  </ListItem>\r\n);\r\n","import styled from 'styled-components';\r\nimport { Container } from '@material-ui/core';\r\n\r\nexport const StyledContainer = styled(Container)`\r\n  justify-content: flex-start;\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createBrowserHistory as createHistory } from 'history';\r\nimport getStore from './redux';\r\nimport Home from './views/HomeScreen';\r\nimport Quiz from './views/QuizScreen';\r\nimport Results from './views/ResultsScreen';\r\nimport './App.css';\r\n\r\nenum ERoutes {\r\n  home = '/',\r\n  quiz = '/quiz',\r\n  results = '/results',\r\n}\r\nexport const history = createHistory({ basename: '/trivia-game' });\r\nconst store = getStore();\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router history={history}>\r\n          <Switch>\r\n            <Route path={ERoutes.home} exact component={Home} />\r\n            <Route path={ERoutes.quiz} component={Quiz} />\r\n            <Route path={ERoutes.results} component={Results} />\r\n          </Switch>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Result from './Result';\r\nimport { List, StyledContainer } from './styled';\r\n\r\ntype IProps = {\r\n  answersTrack: Array<boolean>;\r\n  questions: Array<any>;\r\n  score: number;\r\n  restartQuizHandler(event: any): any;\r\n};\r\n\r\nconst ResultsDisplay = ({\r\n  answersTrack,\r\n  questions,\r\n  score,\r\n  restartQuizHandler,\r\n}: IProps) => (\r\n  <StyledContainer maxWidth=\"sm\" className=\"container\">\r\n    <div>\r\n      <h1>You scored</h1>\r\n      <h1>{score}/10</h1>\r\n    </div>\r\n    <div>\r\n      <List>\r\n        {questions.map((question, index) => {\r\n          return (\r\n            <Result\r\n              question={question}\r\n              result={\r\n                answersTrack[index] !== undefined ? answersTrack[index] : false\r\n              }\r\n              key={index}\r\n            ></Result>\r\n          );\r\n        })}\r\n      </List>\r\n    </div>\r\n\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"secondary\"\r\n      onClick={restartQuizHandler}\r\n      fullWidth={false}\r\n    >\r\n      PLAY AGAIN?\r\n    </Button>\r\n  </StyledContainer>\r\n);\r\n\r\nexport default ResultsDisplay;\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ResultsDisplay from './ResultsDisplay';\r\nimport { resetTriviaAction } from '../../redux/actions';\r\n\r\ntype IProps = {\r\n  answersTrack: Array<boolean>;\r\n  questions: Array<any>;\r\n  history: any;\r\n  resetTrivia: Function;\r\n};\r\ntype IState = {\r\n  score: number;\r\n};\r\n\r\nclass ResultsContainerComponent extends PureComponent<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      score: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const { answersTrack } = this.props;\r\n    const score = answersTrack.filter(item => item === true).length;\r\n    this.setState({\r\n      score,\r\n    });\r\n  }\r\n  restartQuizHandler = () => {\r\n    const { history, resetTrivia } = this.props;\r\n    resetTrivia();\r\n    history.push('/');\r\n  };\r\n  render() {\r\n    const { answersTrack, questions } = this.props;\r\n    const { score } = this.state;\r\n    return (\r\n      <ResultsDisplay\r\n        answersTrack={answersTrack}\r\n        questions={questions}\r\n        score={score}\r\n        restartQuizHandler={this.restartQuizHandler}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  questions: state.home.results,\r\n  answersTrack: state.quiz.answersTrack,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  resetTrivia: resetTriviaAction,\r\n};\r\n\r\nconst ResultsContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ResultsContainerComponent);\r\n\r\nexport { ResultsContainer };\r\n","import { ResultsContainer as Results } from './ResultsContainer';\r\nexport default Results;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}